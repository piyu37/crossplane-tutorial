---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: azure-postgresql
  labels:
    provider: azure
    db: postgresql
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - functionRef:
      name: crossplane-contrib-function-patch-and-transform
    step: patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      patchSets:
      - name: metadata
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
      resources:
      - name: resourcegroup
        base:
          apiVersion: azure.upbound.io/v1beta1
          kind: ResourceGroup
          spec:
            forProvider:
              location: eastus
        patches:
        - type: PatchSet
          patchSetName: metadata
      - name: server
        base:
          apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
          kind: Server
          spec:
            forProvider:
              location: eastus
              resourceGroupNameSelector:
                matchControllerRef: true
              storageMb: 5120
              autoGrowEnabled: true
              sslEnforcementEnabled: false
              sslMinimalTlsVersionEnforced: TLSEnforcementDisabled
              administratorLogin: postgres
              administratorLoginPasswordSecretRef:
                key: password
              publicNetworkAccessEnabled: true
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.id
          toFieldPath: spec.writeConnectionSecretToRef.name
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.parameters.size
          toFieldPath: spec.forProvider.skuName
          transforms:
          - type: map
            map:
              small: B_Gen5_1
              medium: GP_Gen5_2
              large: GP_Gen5_8
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.administratorLoginPasswordSecretRef.name
          transforms:
          - type: string
            string:
              fmt: "%s-password"
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.administratorLoginPasswordSecretRef.namespace
      - name: firewall-rule
        base:
          apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
          kind: FirewallRule
          spec:
            forProvider:
              startIpAddress: 0.0.0.0
              endIpAddress: 255.255.255.255
              resourceGroupNameSelector:
                matchControllerRef: true
              serverNameSelector:
                matchControllerRef: true
        patches:
        - type: PatchSet
          patchSetName: metadata
      - name: sql-config
        base:
          apiVersion: postgresql.sql.crossplane.io/v1alpha1
          kind: ProviderConfig
          metadata:
            name: default
          spec:
            credentials:
              source: PostgreSQLConnectionSecret
            sslMode: require
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.connectionSecretRef.name
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.credentials.connectionSecretRef.namespace
        readinessChecks:
        - type: None
      - name: kubernetes
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: ProviderConfig
          spec:
            credentials:
              source: InjectedIdentity
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "%s-sql"
              type: Format
        readinessChecks:
        - type: None
  - functionRef:
      name: upbound-function-go-templating
    step: sql-db
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ range .observed.composite.resource.spec.parameters.databases }}
          ---
          apiVersion: postgresql.sql.crossplane.io/v1alpha1
          kind: Database
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-{{ . }}
            annotations:
              crossplane.io/external-name: {{ . }}
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-{{ . }}
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}
            forProvider: {}
          {{ end }}
  - functionRef:
      name: upbound-function-go-templating
    step: schema
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ range .observed.composite.resource.spec.parameters.schemas }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}-sql
            forProvider:
              manifest:
                apiVersion: db.atlasgo.io/v1alpha1
                kind: AtlasSchema
                metadata:
                  name: {{ $.observed.composite.resource.spec.id }}-{{ .database }}
                  namespace: {{ $.observed.composite.resource.spec.claimRef.namespace }}
                toFieldPath: spec.credentials.connectionSecretRef.namespace
                spec:
                  credentials:
                    scheme: postgres
                    hostFrom:
                      secretKeyRef:
                        key: endpoint
                        name: {{ $.observed.composite.resource.spec.id }}
                    port: 5432
                    userFrom:
                      secretKeyRef:
                        key: username
                        name: {{ $.observed.composite.resource.spec.id }}
                    passwordFrom:
                      secretKeyRef:
                        key: password
                        name: {{ $.observed.composite.resource.spec.id }}
                    database: {{ .database }}
                    parameters:
                      sslmode: disable
                  schema: 
                    sql: "{{ .sql }}"
          {{ end }}
  - functionRef:
      name: upbound-function-auto-ready
    step: automatically-detect-ready-composed-resources
