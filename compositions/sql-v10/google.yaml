---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: google-postgresql
  labels:
    provider: google
    db: postgresql
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - functionRef:
      name: crossplane-contrib-function-patch-and-transform
    step: patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      patchSets:
      - name: metadata
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
      resources:
      - name: sql
        base:
          apiVersion: sql.gcp.upbound.io/v1beta1
          kind: DatabaseInstance
          spec:
            forProvider:
              region: us-east1
              rootPasswordSecretRef:
                key: password
              settings:
              - availabilityType: REGIONAL
                backupConfiguration:
                - enabled: true
                  binaryLogEnabled: false
                ipConfiguration:
                - ipv4Enabled: true
                  authorizedNetworks:
                  - name: all
                    value: 0.0.0.0/0
              deletionProtection: false
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.databaseVersion
          transforms:
          - type: string
            string:
              fmt: POSTGRES_%s
              type: Format
        - fromFieldPath: spec.parameters.size
          toFieldPath: spec.forProvider.settings[0].tier
          transforms:
          - type: map
            map:
              small: db-custom-1-3840
              medium: db-custom-16-61440
              large: db-custom-64-245760
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.rootPasswordSecretRef.name
          transforms:
          - type: string
            string:
              fmt: "%s-password"
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.rootPasswordSecretRef.namespace
      - name: user
        base:
          apiVersion: sql.gcp.upbound.io/v1beta1
          kind: User
          spec:
            forProvider:
              passwordSecretRef:
                key: password
              instanceSelector:
                matchControllerRef: true
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.passwordSecretRef.name
          transforms:
          - type: string
            string:
              fmt: "%s-password"
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.passwordSecretRef.namespace
      - name: sql-config
        base:
          apiVersion: postgresql.sql.crossplane.io/v1alpha1
          kind: ProviderConfig
          metadata:
            name: default
          spec:
            credentials:
              source: PostgreSQLConnectionSecret
              connectionSecretRef:
                namespace: crossplane-system
            sslMode: require
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.connectionSecretRef.name
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.credentials.connectionSecretRef.namespace
        readinessChecks:
        - type: None
      - name: kubernetes
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: ProviderConfig
          spec:
            credentials:
              source: InjectedIdentity
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "%s-sql"
              type: Format
        readinessChecks:
        - type: None
      - name: sql-secret
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          metadata:
            name: sql-secret
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Secret
                metadata:
                  namespace: crossplane-system
                data:
                  port: NTQzMg==
            references:
            - patchesFrom:
                apiVersion: sql.gcp.upbound.io/v1beta1
                kind: User
                namespace: crossplane-system
                fieldPath: metadata.name
              toFieldPath: stringData.username
            - patchesFrom:
                apiVersion: v1
                kind: Secret
                fieldPath: data.password
              toFieldPath: data.password
            - patchesFrom:
                apiVersion: sql.gcp.upbound.io/v1beta1
                kind: DatabaseInstance
                namespace: crossplane-system
                fieldPath: status.atProvider.publicIpAddress
              toFieldPath: stringData.endpoint
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.id
          toFieldPath: spec.references[0].patchesFrom.name
        - fromFieldPath: spec.id
          toFieldPath: spec.references[1].patchesFrom.name
          transforms:
          - type: string
            string:
              fmt: "%s-password"
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.references[1].patchesFrom.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.references[2].patchesFrom.name
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
          - type: string
            string:
              fmt: "%s-sql"
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
  - functionRef:
      name: upbound-function-go-templating
    step: sql-db
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ range .observed.composite.resource.spec.parameters.databases }}
          ---
          apiVersion: postgresql.sql.crossplane.io/v1alpha1
          kind: Database
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-{{ . }}
            annotations:
              crossplane.io/external-name: {{ . }}
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-{{ . }}
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}
            forProvider: {}
          {{ end }}
  - functionRef:
      name: upbound-function-go-templating
    step: schema
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{ range .observed.composite.resource.spec.parameters.schemas }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}-sql
            forProvider:
              manifest:
                apiVersion: db.atlasgo.io/v1alpha1
                kind: AtlasSchema
                metadata:
                  name: {{ $.observed.composite.resource.spec.id }}-{{ .database }}
                  namespace: {{ $.observed.composite.resource.spec.claimRef.namespace }}
                toFieldPath: spec.credentials.connectionSecretRef.namespace
                spec:
                  credentials:
                    scheme: postgres
                    hostFrom:
                      secretKeyRef:
                        key: endpoint
                        name: {{ $.observed.composite.resource.spec.id }}
                    port: 5432
                    userFrom:
                      secretKeyRef:
                        key: username
                        name: {{ $.observed.composite.resource.spec.id }}
                    passwordFrom:
                      secretKeyRef:
                        key: password
                        name: {{ $.observed.composite.resource.spec.id }}
                    database: {{ .database }}
                    parameters:
                      sslmode: disable
                  schema: 
                    sql: "{{ .sql }}"
          {{ end }}
